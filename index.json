{"repository_name":"dfl","body":"# DFL\n\n[![Spec](https://github.com/D-Shwagginz/dfl/actions/workflows/spec.yml/badge.svg)](https://github.com/D-Shwagginz/dfl/actions/workflows/spec.yml)\n\n[![Static Badge](https://img.shields.io/badge/Check%20The-Docs-blue)](https://d-shwagginz.github.io/dfl/)\n\nA library to help read and write .dfl (D. File) and .dpo (D. Portion) files\n\n## Installation\n\n1. Add `dfl` to your `shard.yml`:\n```yml\ndependencies:\n  dfl:\n    github: D-Shwagginz/dfl\n```\n\n2. Run `shards install`\n\n3. Some methods won't work unless you have [Raylib](https://github.com/raysan5/raylib/releases) installed:\n\n- Install raylib by following the raylib-cr [installation instructions](https://github.com/sol-vin/raylib-cr#installation).\n  - For Linux, follow step 1.\n  - For Windows, follow steps 1-4.\n\n## Usage\n\nTODO: Write usage instructions here\n\n## Contributing\n\n1. Fork it (<https://github.com/D-Shwagginz/dfl/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [D. Shwagginz](https://github.com/D-Shwagginz) - creator and maintainer\n","program":{"html_id":"dfl/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"dfl","program":true,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\""}],"types":[{"html_id":"dfl/DFL","path":"DFL.html","kind":"class","full_name":"DFL","name":"DFL","abstract":false,"superclass":{"html_id":"dfl/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"dfl/WritingMethods/DFL","kind":"module","full_name":"WritingMethods::DFL","name":"DFL"},{"html_id":"dfl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"dfl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/D_File/dfl.cr","line_number":2,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl.cr#L2"},{"filename":"src/D_File/dfl/graphic.cr","line_number":1,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/graphic.cr#L1"},{"filename":"src/D_File/dfl/head.cr","line_number":1,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/head.cr#L1"},{"filename":"src/D_File/dfl/palette.cr","line_number":1,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/palette.cr#L1"},{"filename":"src/D_File/dfl/palgraphic.cr","line_number":1,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/palgraphic.cr#L1"},{"filename":"src/D_File/dfl/sound.cr","line_number":1,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/sound.cr#L1"},{"filename":"src/write.cr","line_number":53,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write.cr#L53"}],"repository_name":"dfl","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"dfl/WritingMethods/DFL","kind":"module","full_name":"WritingMethods::DFL","name":"DFL"}],"doc":"The main class for working with .dfl files","summary":"<p>The main class for working with .dfl files</p>","constructors":[{"html_id":"read(filename:String|Path):DFL-class-method","name":"read","doc":"Reads in a dfl given the filename\n```\ndfl = DFL.read(\"Path/To/MyDFL.dfl\")\n```","summary":"<p>Reads in a dfl given the filename <code>dfl = <a href=\"DFL.html#read%28filename%3AString%7CPath%29%3ADFL-class-method\">DFL.read(&quot;Path/To/MyDFL.dfl&quot;)</a></code></p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path) : DFL","args_html":"(filename : String | Path) : <a href=\"DFL.html\">DFL</a>","location":{"filename":"src/D_File/dfl.cr","line_number":48,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl.cr#L48"},"def":{"name":"read","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"return_type":"DFL","visibility":"Public","body":"File.open(filename) do |io|\n  return read(io)\nend"}},{"html_id":"read(io:IO):DFL-class-method","name":"read","doc":"Reads in a dfl given the io","summary":"<p>Reads in a dfl given the io</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : DFL","args_html":"(io : IO) : <a href=\"DFL.html\">DFL</a>","location":{"filename":"src/D_File/dfl.cr","line_number":55,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl.cr#L55"},"def":{"name":"read","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"DFL","visibility":"Public","body":"dfl = DFL.new\nif (io.gets(4)) != \".DFL\"\n  raise(\"Invalid DFL file\")\nend\ndfl.portions = io.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\ndfl.portions.times do\n  head = Head.read(io)\n  case head.type\n  when HeadType::Empty\n    dfl.empty << head\n  when HeadType::Sound\n    dfl.sounds << head\n  when HeadType::Graphic\n    dfl.graphics << head\n  when HeadType::Palette\n    dfl.palette = head\n  when HeadType::PalGraphic\n    dfl.palgraphics << head\n  end\nend\ndfl\n"}}],"instance_methods":[{"html_id":"add(head:Head)-instance-method","name":"add","doc":"Adds a `DFL::Head` to the dfl","summary":"<p>Adds a <code><a href=\"DFL/Head.html\">DFL::Head</a></code> to the dfl</p>","abstract":false,"args":[{"name":"head","external_name":"head","restriction":"Head"}],"args_string":"(head : Head)","args_html":"(head : <a href=\"DFL/Head.html\">Head</a>)","location":{"filename":"src/D_File/dfl.cr","line_number":29,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl.cr#L29"},"def":{"name":"add","args":[{"name":"head","external_name":"head","restriction":"Head"}],"visibility":"Public","body":"case head.type\nwhen HeadType::Empty\n  empty << head\nwhen HeadType::Sound\n  sounds << head\nwhen HeadType::Graphic\n  graphics << head\nwhen HeadType::Palette\n  palette = head\nwhen HeadType::PalGraphic\n  palgraphics << head\nend"}},{"html_id":"empty:Array(Head)-instance-method","name":"empty","doc":"The array of heads with empty data type","summary":"<p>The array of heads with empty data type</p>","abstract":false,"location":{"filename":"src/D_File/dfl.cr","line_number":6,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl.cr#L6"},"def":{"name":"empty","return_type":"Array(Head)","visibility":"Public","body":"@empty"}},{"html_id":"empty=(empty:Array(Head))-instance-method","name":"empty=","doc":"The array of heads with empty data type","summary":"<p>The array of heads with empty data type</p>","abstract":false,"args":[{"name":"empty","external_name":"empty","restriction":"Array(Head)"}],"args_string":"(empty : Array(Head))","args_html":"(empty : Array(<a href=\"DFL/Head.html\">Head</a>))","location":{"filename":"src/D_File/dfl.cr","line_number":6,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl.cr#L6"},"def":{"name":"empty=","args":[{"name":"empty","external_name":"empty","restriction":"Array(Head)"}],"visibility":"Public","body":"@empty = empty"}},{"html_id":"graphics:Array(Head)-instance-method","name":"graphics","doc":"The array of heads with graphic data type","summary":"<p>The array of heads with graphic data type</p>","abstract":false,"location":{"filename":"src/D_File/dfl.cr","line_number":10,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl.cr#L10"},"def":{"name":"graphics","return_type":"Array(Head)","visibility":"Public","body":"@graphics"}},{"html_id":"graphics=(graphics:Array(Head))-instance-method","name":"graphics=","doc":"The array of heads with graphic data type","summary":"<p>The array of heads with graphic data type</p>","abstract":false,"args":[{"name":"graphics","external_name":"graphics","restriction":"Array(Head)"}],"args_string":"(graphics : Array(Head))","args_html":"(graphics : Array(<a href=\"DFL/Head.html\">Head</a>))","location":{"filename":"src/D_File/dfl.cr","line_number":10,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl.cr#L10"},"def":{"name":"graphics=","args":[{"name":"graphics","external_name":"graphics","restriction":"Array(Head)"}],"visibility":"Public","body":"@graphics = graphics"}},{"html_id":"palette:Head-instance-method","name":"palette","doc":"The universal palette for palette graphics","summary":"<p>The universal palette for palette graphics</p>","abstract":false,"location":{"filename":"src/D_File/dfl.cr","line_number":12,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl.cr#L12"},"def":{"name":"palette","return_type":"Head","visibility":"Public","body":"@palette"}},{"html_id":"palette=(palette:Head)-instance-method","name":"palette=","doc":"The universal palette for palette graphics","summary":"<p>The universal palette for palette graphics</p>","abstract":false,"args":[{"name":"palette","external_name":"palette","restriction":"Head"}],"args_string":"(palette : Head)","args_html":"(palette : <a href=\"DFL/Head.html\">Head</a>)","location":{"filename":"src/D_File/dfl.cr","line_number":12,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl.cr#L12"},"def":{"name":"palette=","args":[{"name":"palette","external_name":"palette","restriction":"Head"}],"visibility":"Public","body":"@palette = palette"}},{"html_id":"palgraphics:Array(Head)-instance-method","name":"palgraphics","doc":"The array of heads with palgraphic data type","summary":"<p>The array of heads with palgraphic data type</p>","abstract":false,"location":{"filename":"src/D_File/dfl.cr","line_number":14,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl.cr#L14"},"def":{"name":"palgraphics","return_type":"Array(Head)","visibility":"Public","body":"@palgraphics"}},{"html_id":"palgraphics=(palgraphics:Array(Head))-instance-method","name":"palgraphics=","doc":"The array of heads with palgraphic data type","summary":"<p>The array of heads with palgraphic data type</p>","abstract":false,"args":[{"name":"palgraphics","external_name":"palgraphics","restriction":"Array(Head)"}],"args_string":"(palgraphics : Array(Head))","args_html":"(palgraphics : Array(<a href=\"DFL/Head.html\">Head</a>))","location":{"filename":"src/D_File/dfl.cr","line_number":14,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl.cr#L14"},"def":{"name":"palgraphics=","args":[{"name":"palgraphics","external_name":"palgraphics","restriction":"Array(Head)"}],"visibility":"Public","body":"@palgraphics = palgraphics"}},{"html_id":"portions:UInt32-instance-method","name":"portions","doc":"The number of portions in the dfl","summary":"<p>The number of portions in the dfl</p>","abstract":false,"location":{"filename":"src/D_File/dfl.cr","line_number":4,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl.cr#L4"},"def":{"name":"portions","return_type":"UInt32","visibility":"Public","body":"@portions"}},{"html_id":"portions=(portions:UInt32)-instance-method","name":"portions=","doc":"The number of portions in the dfl","summary":"<p>The number of portions in the dfl</p>","abstract":false,"args":[{"name":"portions","external_name":"portions","restriction":"UInt32"}],"args_string":"(portions : UInt32)","args_html":"(portions : UInt32)","location":{"filename":"src/D_File/dfl.cr","line_number":4,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl.cr#L4"},"def":{"name":"portions=","args":[{"name":"portions","external_name":"portions","restriction":"UInt32"}],"visibility":"Public","body":"@portions = portions"}},{"html_id":"sounds:Array(Head)-instance-method","name":"sounds","doc":"The array of heads with sound data type","summary":"<p>The array of heads with sound data type</p>","abstract":false,"location":{"filename":"src/D_File/dfl.cr","line_number":8,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl.cr#L8"},"def":{"name":"sounds","return_type":"Array(Head)","visibility":"Public","body":"@sounds"}},{"html_id":"sounds=(sounds:Array(Head))-instance-method","name":"sounds=","doc":"The array of heads with sound data type","summary":"<p>The array of heads with sound data type</p>","abstract":false,"args":[{"name":"sounds","external_name":"sounds","restriction":"Array(Head)"}],"args_string":"(sounds : Array(Head))","args_html":"(sounds : Array(<a href=\"DFL/Head.html\">Head</a>))","location":{"filename":"src/D_File/dfl.cr","line_number":8,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl.cr#L8"},"def":{"name":"sounds=","args":[{"name":"sounds","external_name":"sounds","restriction":"Array(Head)"}],"visibility":"Public","body":"@sounds = sounds"}}],"types":[{"html_id":"dfl/DFL/Color","path":"DFL/Color.html","kind":"struct","full_name":"DFL::Color","name":"Color","abstract":false,"superclass":{"html_id":"dfl/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"dfl/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"dfl/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"dfl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/D_File/dfl/graphic.cr","line_number":3,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/graphic.cr#L3"}],"repository_name":"dfl","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"dfl/DFL","kind":"class","full_name":"DFL","name":"DFL"},"doc":"A color","summary":"<p>A color</p>","constructors":[{"html_id":"from_raylib(color:Raylib::Color):Color-class-method","name":"from_raylib","abstract":false,"args":[{"name":"color","external_name":"color","restriction":"Raylib::Color"}],"args_string":"(color : Raylib::Color) : Color","args_html":"(color : Raylib::Color) : <a href=\"../DFL/Color.html\">Color</a>","location":{"filename":"src/D_File/dfl/graphic.cr","line_number":14,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/graphic.cr#L14"},"def":{"name":"from_raylib","args":[{"name":"color","external_name":"color","restriction":"Raylib::Color"}],"return_type":"Color","visibility":"Public","body":"Color.new(r: color.r, g: color.g, b: color.b)"}},{"html_id":"new(r:UInt8=0,g:UInt8=0,b:UInt8=0)-class-method","name":"new","abstract":false,"args":[{"name":"r","default_value":"0","external_name":"r","restriction":"UInt8"},{"name":"g","default_value":"0","external_name":"g","restriction":"UInt8"},{"name":"b","default_value":"0","external_name":"b","restriction":"UInt8"}],"args_string":"(r : UInt8 = 0, g : UInt8 = 0, b : UInt8 = 0)","args_html":"(r : UInt8 = <span class=\"n\">0</span>, g : UInt8 = <span class=\"n\">0</span>, b : UInt8 = <span class=\"n\">0</span>)","location":{"filename":"src/D_File/dfl/graphic.cr","line_number":8,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/graphic.cr#L8"},"def":{"name":"new","args":[{"name":"r","default_value":"0","external_name":"r","restriction":"UInt8"},{"name":"g","default_value":"0","external_name":"g","restriction":"UInt8"},{"name":"b","default_value":"0","external_name":"b","restriction":"UInt8"}],"visibility":"Public","body":"_ = allocate\n_.initialize(r, g, b)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"b:UInt8-instance-method","name":"b","abstract":false,"location":{"filename":"src/D_File/dfl/graphic.cr","line_number":6,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/graphic.cr#L6"},"def":{"name":"b","return_type":"UInt8","visibility":"Public","body":"@b"}},{"html_id":"b=(b:UInt8)-instance-method","name":"b=","abstract":false,"args":[{"name":"b","external_name":"b","restriction":"UInt8"}],"args_string":"(b : UInt8)","args_html":"(b : UInt8)","location":{"filename":"src/D_File/dfl/graphic.cr","line_number":6,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/graphic.cr#L6"},"def":{"name":"b=","args":[{"name":"b","external_name":"b","restriction":"UInt8"}],"visibility":"Public","body":"@b = b"}},{"html_id":"g:UInt8-instance-method","name":"g","abstract":false,"location":{"filename":"src/D_File/dfl/graphic.cr","line_number":5,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/graphic.cr#L5"},"def":{"name":"g","return_type":"UInt8","visibility":"Public","body":"@g"}},{"html_id":"g=(g:UInt8)-instance-method","name":"g=","abstract":false,"args":[{"name":"g","external_name":"g","restriction":"UInt8"}],"args_string":"(g : UInt8)","args_html":"(g : UInt8)","location":{"filename":"src/D_File/dfl/graphic.cr","line_number":5,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/graphic.cr#L5"},"def":{"name":"g=","args":[{"name":"g","external_name":"g","restriction":"UInt8"}],"visibility":"Public","body":"@g = g"}},{"html_id":"r:UInt8-instance-method","name":"r","abstract":false,"location":{"filename":"src/D_File/dfl/graphic.cr","line_number":4,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/graphic.cr#L4"},"def":{"name":"r","return_type":"UInt8","visibility":"Public","body":"@r"}},{"html_id":"r=(r:UInt8)-instance-method","name":"r=","abstract":false,"args":[{"name":"r","external_name":"r","restriction":"UInt8"}],"args_string":"(r : UInt8)","args_html":"(r : UInt8)","location":{"filename":"src/D_File/dfl/graphic.cr","line_number":4,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/graphic.cr#L4"},"def":{"name":"r=","args":[{"name":"r","external_name":"r","restriction":"UInt8"}],"visibility":"Public","body":"@r = r"}},{"html_id":"to_raylib:Raylib::Color-instance-method","name":"to_raylib","abstract":false,"location":{"filename":"src/D_File/dfl/graphic.cr","line_number":18,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/graphic.cr#L18"},"def":{"name":"to_raylib","return_type":"Raylib::Color","visibility":"Public","body":"Raylib::Color.new(r: r, g: g, b: b, a: 255)"}}]},{"html_id":"dfl/DFL/DataTypes","path":"DFL/DataTypes.html","kind":"alias","full_name":"DFL::DataTypes","name":"DataTypes","abstract":false,"locations":[{"filename":"src/D_File/dfl.cr","line_number":17,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl.cr#L17"}],"repository_name":"dfl","program":false,"enum":false,"alias":true,"aliased":"(DFL::Empty | DFL::Graphic | DFL::PalGraphic | DFL::Palette | DFL::Sound)","aliased_html":"<a href=\"../DFL/Empty.html\">DFL::Empty</a> | <a href=\"../DFL/Graphic.html\">DFL::Graphic</a> | <a href=\"../DFL/PalGraphic.html\">DFL::PalGraphic</a> | <a href=\"../DFL/Palette.html\">DFL::Palette</a> | <a href=\"../DFL/Sound.html\">DFL::Sound</a>","const":false,"namespace":{"html_id":"dfl/DFL","kind":"class","full_name":"DFL","name":"DFL"},"doc":"The types that a `DFL::Head`'s data could be","summary":"<p>The types that a <code><a href=\"../DFL/Head.html\">DFL::Head</a></code>'s data could be</p>"},{"html_id":"dfl/DFL/Empty","path":"DFL/Empty.html","kind":"struct","full_name":"DFL::Empty","name":"Empty","abstract":false,"superclass":{"html_id":"dfl/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"dfl/WritingMethods/DFL/Empty","kind":"module","full_name":"WritingMethods::DFL::Empty","name":"Empty"},{"html_id":"dfl/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"dfl/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"dfl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/D_File/dfl/head.cr","line_number":43,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/head.cr#L43"},{"filename":"src/write.cr","line_number":61,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write.cr#L61"}],"repository_name":"dfl","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"dfl/WritingMethods/DFL/Empty","kind":"module","full_name":"WritingMethods::DFL::Empty","name":"Empty"}],"namespace":{"html_id":"dfl/DFL","kind":"class","full_name":"DFL","name":"DFL"},"doc":"Empty `DFL::Head` data","summary":"<p>Empty <code><a href=\"../DFL/Head.html\">DFL::Head</a></code> data</p>","constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/D_File/dfl/head.cr","line_number":43,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/head.cr#L43"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/D_File/dfl/head.cr","line_number":43,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/head.cr#L43"},"def":{"name":"initialize","visibility":"Public","body":""}}]},{"html_id":"dfl/DFL/Graphic","path":"DFL/Graphic.html","kind":"class","full_name":"DFL::Graphic","name":"Graphic","abstract":false,"superclass":{"html_id":"dfl/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"dfl/WritingMethods/DFL/Graphic","kind":"module","full_name":"WritingMethods::DFL::Graphic","name":"Graphic"},{"html_id":"dfl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"dfl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/D_File/dfl/graphic.cr","line_number":24,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/graphic.cr#L24"},{"filename":"src/write.cr","line_number":69,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write.cr#L69"}],"repository_name":"dfl","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"dfl/WritingMethods/DFL/Graphic","kind":"module","full_name":"WritingMethods::DFL::Graphic","name":"Graphic"}],"namespace":{"html_id":"dfl/DFL","kind":"class","full_name":"DFL","name":"DFL"},"doc":"A `DFL::Head`'s graphic data","summary":"<p>A <code><a href=\"../DFL/Head.html\">DFL::Head</a></code>'s graphic data</p>","constructors":[{"html_id":"from_image(image:Raylib::Image):Graphic-class-method","name":"from_image","doc":"Converts a Raylib::Image to a graphic","summary":"<p>Converts a Raylib::Image to a graphic</p>","abstract":false,"args":[{"name":"image","external_name":"image","restriction":"Raylib::Image"}],"args_string":"(image : Raylib::Image) : Graphic","args_html":"(image : Raylib::Image) : <a href=\"../DFL/Graphic.html\">Graphic</a>","location":{"filename":"src/D_File/dfl/graphic.cr","line_number":121,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/graphic.cr#L121"},"def":{"name":"from_image","args":[{"name":"image","external_name":"image","restriction":"Raylib::Image"}],"return_type":"Graphic","visibility":"Public","body":"graphic = Graphic.new\ngraphic.width = image.width.to_u16\ngraphic.height = image.height.to_u16\ngraphic.width.times do |x|\n  graphic.height.times do |y|\n    color = Raylib.get_image_color(image, x, y)\n    if color.a == 0\n      graphic.data << nil\n    else\n      graphic.data << (Color.from_raylib(color))\n    end\n  end\nend\ngraphic\n"}},{"html_id":"read(io:IO):Graphic-class-method","name":"read","doc":"Reads in a dfl graphic given the io","summary":"<p>Reads in a dfl graphic given the io</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Graphic","args_html":"(io : IO) : <a href=\"../DFL/Graphic.html\">Graphic</a>","location":{"filename":"src/D_File/dfl/graphic.cr","line_number":33,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/graphic.cr#L33"},"def":{"name":"read","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Graphic","visibility":"Public","body":"graphic = Graphic.new\ngraphic.width = io.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\ngraphic.height = io.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\ncolor_byte_size = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\ncase color_byte_size\nwhen 8\n  colors_size = io.read_bytes(UInt64, IO::ByteFormat::LittleEndian)\nwhen 4\n  colors_size = io.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\nwhen 2\n  colors_size = io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\nwhen 1\n  colors_size = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\nend\ncolors = [] of Color\nif colors_size\n  colors_size.times do\n    color = Color.new\n    color.r = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\n    color.g = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\n    color.b = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\n    colors << color\n  end\n  while !(graphic.data.size == (graphic.width * graphic.height))\n    has_data = (io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)) == 1\n    same_color_len_byte_size = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\n    case same_color_len_byte_size\n    when 8\n      same_color_len = io.read_bytes(UInt64, IO::ByteFormat::LittleEndian)\n    when 4\n      same_color_len = io.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\n    when 2\n      same_color_len = io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\n    when 1\n      same_color_len = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\n    end\n    if same_color_len\n      if has_data\n        case color_byte_size\n        when 8\n          color_index = io.read_bytes(UInt64, IO::ByteFormat::LittleEndian)\n        when 4\n          color_index = io.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\n        when 2\n          color_index = io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\n        when 1\n          color_index = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\n        end\n        if color_index\n          (same_color_len + 1).times do\n            graphic.data << colors[color_index]\n          end\n        end\n      else\n        (same_color_len + 1).times do\n          graphic.data << nil\n        end\n      end\n    end\n  end\nend\ngraphic\n"}}],"instance_methods":[{"html_id":"data:Array(Color|Nil)-instance-method","name":"data","doc":"The image data","summary":"<p>The image data</p>","abstract":false,"location":{"filename":"src/D_File/dfl/graphic.cr","line_number":30,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/graphic.cr#L30"},"def":{"name":"data","return_type":"Array(Color | Nil)","visibility":"Public","body":"@data"}},{"html_id":"data=(data:Array(Color|Nil))-instance-method","name":"data=","doc":"The image data","summary":"<p>The image data</p>","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"Array(Color | Nil)"}],"args_string":"(data : Array(Color | Nil))","args_html":"(data : Array(<a href=\"../DFL/Color.html\">Color</a> | Nil))","location":{"filename":"src/D_File/dfl/graphic.cr","line_number":30,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/graphic.cr#L30"},"def":{"name":"data=","args":[{"name":"data","external_name":"data","restriction":"Array(Color | Nil)"}],"visibility":"Public","body":"@data = data"}},{"html_id":"height:UInt32-instance-method","name":"height","doc":"The height of the image","summary":"<p>The height of the image</p>","abstract":false,"location":{"filename":"src/D_File/dfl/graphic.cr","line_number":28,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/graphic.cr#L28"},"def":{"name":"height","return_type":"UInt32","visibility":"Public","body":"@height"}},{"html_id":"height=(height:UInt32)-instance-method","name":"height=","doc":"The height of the image","summary":"<p>The height of the image</p>","abstract":false,"args":[{"name":"height","external_name":"height","restriction":"UInt32"}],"args_string":"(height : UInt32)","args_html":"(height : UInt32)","location":{"filename":"src/D_File/dfl/graphic.cr","line_number":28,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/graphic.cr#L28"},"def":{"name":"height=","args":[{"name":"height","external_name":"height","restriction":"UInt32"}],"visibility":"Public","body":"@height = height"}},{"html_id":"to_image:Raylib::Image-instance-method","name":"to_image","doc":"Converts a graphic to a Raylib::Image","summary":"<p>Converts a graphic to a Raylib::Image</p>","abstract":false,"location":{"filename":"src/D_File/dfl/graphic.cr","line_number":106,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/graphic.cr#L106"},"def":{"name":"to_image","return_type":"Raylib::Image","visibility":"Public","body":"image = Raylib.gen_image_color(@width, @height, Raylib::BLANK)\nwidth.times do |x|\n  height.times do |y|\n    pixel = data[(x.to_i * width.to_i) + y.to_i]\n    if pixel.nil?\n      next\n    end\n    Raylib.image_draw_pixel(pointerof(image), x, y, (pixel.as(Color)).to_raylib)\n  end\nend\nimage\n"}},{"html_id":"width:UInt32-instance-method","name":"width","doc":"The width of the image","summary":"<p>The width of the image</p>","abstract":false,"location":{"filename":"src/D_File/dfl/graphic.cr","line_number":26,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/graphic.cr#L26"},"def":{"name":"width","return_type":"UInt32","visibility":"Public","body":"@width"}},{"html_id":"width=(width:UInt32)-instance-method","name":"width=","doc":"The width of the image","summary":"<p>The width of the image</p>","abstract":false,"args":[{"name":"width","external_name":"width","restriction":"UInt32"}],"args_string":"(width : UInt32)","args_html":"(width : UInt32)","location":{"filename":"src/D_File/dfl/graphic.cr","line_number":26,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/graphic.cr#L26"},"def":{"name":"width=","args":[{"name":"width","external_name":"width","restriction":"UInt32"}],"visibility":"Public","body":"@width = width"}}]},{"html_id":"dfl/DFL/Head","path":"DFL/Head.html","kind":"class","full_name":"DFL::Head","name":"Head","abstract":false,"superclass":{"html_id":"dfl/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"dfl/WritingMethods/DFL/Head","kind":"module","full_name":"WritingMethods::DFL::Head","name":"Head"},{"html_id":"dfl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"dfl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/D_File/dfl/head.cr","line_number":3,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/head.cr#L3"},{"filename":"src/write.cr","line_number":57,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write.cr#L57"}],"repository_name":"dfl","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"dfl/WritingMethods/DFL/Head","kind":"module","full_name":"WritingMethods::DFL::Head","name":"Head"}],"namespace":{"html_id":"dfl/DFL","kind":"class","full_name":"DFL","name":"DFL"},"doc":"A chunk of data that holds info about data in the `DFL`","summary":"<p>A chunk of data that holds info about data in the <code><a href=\"../DFL.html\">DFL</a></code></p>","class_methods":[{"html_id":"read(filename:String|Path)-class-method","name":"read","doc":"Reads in a head given the filepath\n```\nhead = DFL::Head.read(\"Path/To/MyHead.dpo\")\n```","summary":"<p>Reads in a head given the filepath <code>head = <a href=\"../DFL/Head.html#read%28filename%3AString%7CPath%29-class-method\">DFL::Head.read(&quot;Path/To/MyHead.dpo&quot;)</a></code></p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path)","args_html":"(filename : String | Path)","location":{"filename":"src/D_File/dfl/head.cr","line_number":17,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/head.cr#L17"},"def":{"name":"read","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"visibility":"Public","body":"File.open(filename) do |io|\n  read(io)\nend"}}],"constructors":[{"html_id":"read(io:IO):Head-class-method","name":"read","doc":"Reads in a head given the io","summary":"<p>Reads in a head given the io</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Head","args_html":"(io : IO) : <a href=\"../DFL/Head.html\">Head</a>","location":{"filename":"src/D_File/dfl/head.cr","line_number":24,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/head.cr#L24"},"def":{"name":"read","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Head","visibility":"Public","body":"head = Head.new\nhead.type = HeadType.new(io.read_bytes(UInt8, IO::ByteFormat::LittleEndian))\nhead.name_length = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\nhead.name = (io.gets(head.name_length)).to_s\ncase head.type\nwhen HeadType::Sound\n  head.data = Sound.read(io)\nwhen HeadType::Graphic\n  head.data = Graphic.read(io)\nend\nhead\n"}}],"instance_methods":[{"html_id":"data:DataTypes-instance-method","name":"data","doc":"The head's data","summary":"<p>The head's data</p>","abstract":false,"location":{"filename":"src/D_File/dfl/head.cr","line_number":11,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/head.cr#L11"},"def":{"name":"data","return_type":"DataTypes","visibility":"Public","body":"@data"}},{"html_id":"data=(data:DataTypes)-instance-method","name":"data=","doc":"The head's data","summary":"<p>The head's data</p>","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"DataTypes"}],"args_string":"(data : DataTypes)","args_html":"(data : <a href=\"../DFL/DataTypes.html\">DataTypes</a>)","location":{"filename":"src/D_File/dfl/head.cr","line_number":11,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/head.cr#L11"},"def":{"name":"data=","args":[{"name":"data","external_name":"data","restriction":"DataTypes"}],"visibility":"Public","body":"@data = data"}},{"html_id":"name:String-instance-method","name":"name","doc":"The name","summary":"<p>The name</p>","abstract":false,"location":{"filename":"src/D_File/dfl/head.cr","line_number":9,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/head.cr#L9"},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"}},{"html_id":"name=(name:String)-instance-method","name":"name=","doc":"The name","summary":"<p>The name</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/D_File/dfl/head.cr","line_number":9,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/head.cr#L9"},"def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"@name = name"}},{"html_id":"name_length:UInt8-instance-method","name":"name_length","doc":"The length of the name","summary":"<p>The length of the name</p>","abstract":false,"location":{"filename":"src/D_File/dfl/head.cr","line_number":7,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/head.cr#L7"},"def":{"name":"name_length","return_type":"UInt8","visibility":"Public","body":"@name_length"}},{"html_id":"name_length=(name_length:UInt8)-instance-method","name":"name_length=","doc":"The length of the name","summary":"<p>The length of the name</p>","abstract":false,"args":[{"name":"name_length","external_name":"name_length","restriction":"UInt8"}],"args_string":"(name_length : UInt8)","args_html":"(name_length : UInt8)","location":{"filename":"src/D_File/dfl/head.cr","line_number":7,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/head.cr#L7"},"def":{"name":"name_length=","args":[{"name":"name_length","external_name":"name_length","restriction":"UInt8"}],"visibility":"Public","body":"@name_length = name_length"}},{"html_id":"type:HeadType-instance-method","name":"type","doc":"The type of the head","summary":"<p>The type of the head</p>","abstract":false,"location":{"filename":"src/D_File/dfl/head.cr","line_number":5,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/head.cr#L5"},"def":{"name":"type","return_type":"HeadType","visibility":"Public","body":"@type"}},{"html_id":"type=(type:HeadType)-instance-method","name":"type=","doc":"The type of the head","summary":"<p>The type of the head</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"HeadType"}],"args_string":"(type : HeadType)","args_html":"(type : <a href=\"../DFL/HeadType.html\">HeadType</a>)","location":{"filename":"src/D_File/dfl/head.cr","line_number":5,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/head.cr#L5"},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"HeadType"}],"visibility":"Public","body":"@type = type"}}]},{"html_id":"dfl/DFL/HeadType","path":"DFL/HeadType.html","kind":"enum","full_name":"DFL::HeadType","name":"HeadType","abstract":false,"ancestors":[{"html_id":"dfl/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"dfl/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"dfl/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"dfl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/D_File/dfl.cr","line_number":20,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl.cr#L20"}],"repository_name":"dfl","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Empty","name":"Empty","value":"0"},{"id":"Sound","name":"Sound","value":"1"},{"id":"Graphic","name":"Graphic","value":"2"},{"id":"Palette","name":"Palette","value":"3"},{"id":"PalGraphic","name":"PalGraphic","value":"4"}],"namespace":{"html_id":"dfl/DFL","kind":"class","full_name":"DFL","name":"DFL"},"doc":"The type of a `DFL::Head`","summary":"<p>The type of a <code><a href=\"../DFL/Head.html\">DFL::Head</a></code></p>","instance_methods":[{"html_id":"empty?-instance-method","name":"empty?","abstract":false,"location":{"filename":"src/D_File/dfl.cr","line_number":21,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl.cr#L21"},"def":{"name":"empty?","visibility":"Public","body":"self == Empty"}},{"html_id":"graphic?-instance-method","name":"graphic?","abstract":false,"location":{"filename":"src/D_File/dfl.cr","line_number":23,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl.cr#L23"},"def":{"name":"graphic?","visibility":"Public","body":"self == Graphic"}},{"html_id":"pal_graphic?-instance-method","name":"pal_graphic?","abstract":false,"location":{"filename":"src/D_File/dfl.cr","line_number":25,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl.cr#L25"},"def":{"name":"pal_graphic?","visibility":"Public","body":"self == PalGraphic"}},{"html_id":"palette?-instance-method","name":"palette?","abstract":false,"location":{"filename":"src/D_File/dfl.cr","line_number":24,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl.cr#L24"},"def":{"name":"palette?","visibility":"Public","body":"self == Palette"}},{"html_id":"sound?-instance-method","name":"sound?","abstract":false,"location":{"filename":"src/D_File/dfl.cr","line_number":22,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl.cr#L22"},"def":{"name":"sound?","visibility":"Public","body":"self == Sound"}}]},{"html_id":"dfl/DFL/Palette","path":"DFL/Palette.html","kind":"class","full_name":"DFL::Palette","name":"Palette","abstract":false,"superclass":{"html_id":"dfl/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"dfl/WritingMethods/DFL/Palette","kind":"module","full_name":"WritingMethods::DFL::Palette","name":"Palette"},{"html_id":"dfl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"dfl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/D_File/dfl/palette.cr","line_number":3,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/palette.cr#L3"},{"filename":"src/write.cr","line_number":73,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write.cr#L73"}],"repository_name":"dfl","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"dfl/WritingMethods/DFL/Palette","kind":"module","full_name":"WritingMethods::DFL::Palette","name":"Palette"}],"namespace":{"html_id":"dfl/DFL","kind":"class","full_name":"DFL","name":"DFL"},"doc":"A `DFL::Head`'s palette data","summary":"<p>A <code><a href=\"../DFL/Head.html\">DFL::Head</a></code>'s palette data</p>","constructors":[{"html_id":"read(io:IO):Palette-class-method","name":"read","doc":"Reads in a dfl palette given the io","summary":"<p>Reads in a dfl palette given the io</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Palette","args_html":"(io : IO) : <a href=\"../DFL/Palette.html\">Palette</a>","location":{"filename":"src/D_File/dfl/palette.cr","line_number":8,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/palette.cr#L8"},"def":{"name":"read","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Palette","visibility":"Public","body":"palette = Palette.new\nsize_byte_size = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\ncase size_byte_size\nwhen 8\n  size = io.read_bytes(UInt64, IO::ByteFormat::LittleEndian)\nwhen 4\n  size = io.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\nwhen 2\n  size = io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\nwhen 1\n  size = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\nend\nsize.times do\n  color = Raylib::Color.new\n  color.r = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\n  color.g = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\n  color.b = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\nend\n"}}],"instance_methods":[{"html_id":"colors:Array(Color)-instance-method","name":"colors","doc":"The colors of the palette","summary":"<p>The colors of the palette</p>","abstract":false,"location":{"filename":"src/D_File/dfl/palette.cr","line_number":5,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/palette.cr#L5"},"def":{"name":"colors","return_type":"Array(Color)","visibility":"Public","body":"@colors"}},{"html_id":"colors=(colors:Array(Color))-instance-method","name":"colors=","doc":"The colors of the palette","summary":"<p>The colors of the palette</p>","abstract":false,"args":[{"name":"colors","external_name":"colors","restriction":"Array(Color)"}],"args_string":"(colors : Array(Color))","args_html":"(colors : Array(<a href=\"../DFL/Color.html\">Color</a>))","location":{"filename":"src/D_File/dfl/palette.cr","line_number":5,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/palette.cr#L5"},"def":{"name":"colors=","args":[{"name":"colors","external_name":"colors","restriction":"Array(Color)"}],"visibility":"Public","body":"@colors = colors"}}]},{"html_id":"dfl/DFL/PalGraphic","path":"DFL/PalGraphic.html","kind":"class","full_name":"DFL::PalGraphic","name":"PalGraphic","abstract":false,"superclass":{"html_id":"dfl/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"dfl/WritingMethods/DFL/PalGraphic","kind":"module","full_name":"WritingMethods::DFL::PalGraphic","name":"PalGraphic"},{"html_id":"dfl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"dfl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/D_File/dfl/palgraphic.cr","line_number":3,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/palgraphic.cr#L3"},{"filename":"src/write.cr","line_number":77,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write.cr#L77"}],"repository_name":"dfl","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"dfl/WritingMethods/DFL/PalGraphic","kind":"module","full_name":"WritingMethods::DFL::PalGraphic","name":"PalGraphic"}],"namespace":{"html_id":"dfl/DFL","kind":"class","full_name":"DFL","name":"DFL"},"doc":"A `DFL::Head`'s palgraphic data","summary":"<p>A <code><a href=\"../DFL/Head.html\">DFL::Head</a></code>'s palgraphic data</p>","class_methods":[{"html_id":"color_distance(color1:Color,color2:Color):Int-class-method","name":"color_distance","doc":"Gets the absolute [Color Distance](https://en.wikipedia.org/wiki/Color_difference) between *color1* to *color*2","summary":"<p>Gets the absolute <a href=\"https://en.wikipedia.org/wiki/Color_difference\">Color Distance</a> between <em>color1</em> to <em>color</em>2</p>","abstract":false,"args":[{"name":"color1","external_name":"color1","restriction":"Color"},{"name":"color2","external_name":"color2","restriction":"Color"}],"args_string":"(color1 : Color, color2 : Color) : Int","args_html":"(color1 : <a href=\"../DFL/Color.html\">Color</a>, color2 : <a href=\"../DFL/Color.html\">Color</a>) : Int","location":{"filename":"src/D_File/dfl/palgraphic.cr","line_number":77,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/palgraphic.cr#L77"},"def":{"name":"color_distance","args":[{"name":"color1","external_name":"color1","restriction":"Color"},{"name":"color2","external_name":"color2","restriction":"Color"}],"return_type":"Int","visibility":"Public","body":"return ((((color1.r.to_i - color2.r.to_i) ** 2) + ((color1.g.to_i - color2.g.to_i) ** 2)) + ((color1.b.to_i - color2.b.to_i) ** 2)).abs"}}],"constructors":[{"html_id":"from_graphic(graphic:Graphic,palette:Palette):PalGraphic-class-method","name":"from_graphic","doc":"Converts a graphic to a palgraphic\n\nNOTE: If you get an arithmetic overflow error at any point, chances are that your image is too big","summary":"<p>Converts a graphic to a palgraphic</p>","abstract":false,"args":[{"name":"graphic","external_name":"graphic","restriction":"Graphic"},{"name":"palette","external_name":"palette","restriction":"Palette"}],"args_string":"(graphic : Graphic, palette : Palette) : PalGraphic","args_html":"(graphic : <a href=\"../DFL/Graphic.html\">Graphic</a>, palette : <a href=\"../DFL/Palette.html\">Palette</a>) : <a href=\"../DFL/PalGraphic.html\">PalGraphic</a>","location":{"filename":"src/D_File/dfl/palgraphic.cr","line_number":138,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/palgraphic.cr#L138"},"def":{"name":"from_graphic","args":[{"name":"graphic","external_name":"graphic","restriction":"Graphic"},{"name":"palette","external_name":"palette","restriction":"Palette"}],"return_type":"PalGraphic","visibility":"Public","body":"current_closest_color : Tuple(Color, UInt8, Int32) = {Color.new, 0_u8, 0}\npalgraphic = PalGraphic.new\npalgraphic.width = graphic.width.to_u32\npalgraphic.height = graphic.height.to_u32\ngraphic.height.times do |y|\n  graphic.width.times do |x|\n    current_graphic_color = graphic.data[(x.to_i * width.to_i) + y.to_i]\n    if current_graphic_color.a != 0\n      palette_color = Color.new(r: palette.colors[0].r, g: palette.colors[0].g, b: palette.colors[0].b)\n      current_closest_color = {palette_color, 0_u8, color_distance(current_graphic_color, palette_color)}\n      palette.colors.each.with_index do |color, index|\n        palette_color = Color.new(r: color.r, g: color.g, b: color.b)\n        if (current_distance = color_distance(current_graphic_color, palette_color)) < current_closest_color[2]\n          current_closest_color = {palette_color, index.to_u8, current_distance}\n        end\n      end\n      palgraphic.data << current_closest_color[1]\n    else\n      palgraphic.data << nil\n    end\n  end\nend\nreturn palgraphic\n"}},{"html_id":"from_image(image:Raylib::Image,palette:Palette):PalGraphic-class-method","name":"from_image","doc":"Converts a `Raylib::Image` to a palgraphic\n\nNOTE: If you get an arithmetic overflow error at any point, chances are that your image is too big","summary":"<p>Converts a <code>Raylib::Image</code> to a palgraphic</p>","abstract":false,"args":[{"name":"image","external_name":"image","restriction":"Raylib::Image"},{"name":"palette","external_name":"palette","restriction":"Palette"}],"args_string":"(image : Raylib::Image, palette : Palette) : PalGraphic","args_html":"(image : Raylib::Image, palette : <a href=\"../DFL/Palette.html\">Palette</a>) : <a href=\"../DFL/PalGraphic.html\">PalGraphic</a>","location":{"filename":"src/D_File/dfl/palgraphic.cr","line_number":86,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/palgraphic.cr#L86"},"def":{"name":"from_image","args":[{"name":"image","external_name":"image","restriction":"Raylib::Image"},{"name":"palette","external_name":"palette","restriction":"Palette"}],"return_type":"PalGraphic","visibility":"Public","body":"current_closest_color : Tuple(Color, UInt8, Int32) = {Color.new, 0_u8, 0}\npalgraphic = PalGraphic.new\npalgraphic.width = image.width.to_u32\npalgraphic.height = image.height.to_u32\nimage.height.times do |y|\n  image.width.times do |x|\n    current_image_color = Raylib.get_image_color(image, x, y)\n    if current_image_color.a != 0\n      palette_color = Color.new(r: palette.colors[0].r, g: palette.colors[0].g, b: palette.colors[0].b)\n      current_closest_color = {palette_color, 0_u8, color_distance(current_image_color, palette_color)}\n      palette.colors.each.with_index do |color, index|\n        palette_color = Color.new(r: color.r, g: color.g, b: color.b)\n        if (current_distance = color_distance(current_image_color, palette_color)) < current_closest_color[2]\n          current_closest_color = {palette_color, index.to_u8, current_distance}\n        end\n      end\n      palgraphic.data << current_closest_color[1]\n    else\n      palgraphic.data << nil\n    end\n  end\nend\nreturn palgraphic\n"}},{"html_id":"read(io:IO):PalGraphic-class-method","name":"read","doc":"Reads in a dfl palgraphic given the io","summary":"<p>Reads in a dfl palgraphic given the io</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : PalGraphic","args_html":"(io : IO) : <a href=\"../DFL/PalGraphic.html\">PalGraphic</a>","location":{"filename":"src/D_File/dfl/palgraphic.cr","line_number":12,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/palgraphic.cr#L12"},"def":{"name":"read","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"PalGraphic","visibility":"Public","body":"palgraphic = Graphic.new\npalgraphic.width = io.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\npalgraphic.height = io.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\ncolor_byte_size = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\nwhile !(palgraphic.data.size == (palgraphic.width * palgraphic.height))\n  has_data = (io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)) == 1\n  same_color_len_byte_size = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\n  case same_color_len_byte_size\n  when 8\n    same_color_len = io.read_bytes(UInt64, IO::ByteFormat::LittleEndian)\n  when 4\n    same_color_len = io.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\n  when 2\n    same_color_len = io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\n  when 1\n    same_color_len = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\n  end\n  if same_color_len\n    if has_data\n      case color_byte_size\n      when 8\n        color_index = io.read_bytes(UInt64, IO::ByteFormat::LittleEndian)\n      when 4\n        color_index = io.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\n      when 2\n        color_index = io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\n      when 1\n        color_index = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\n      end\n      if color_index\n        (same_color_len + 1).times do\n          palgraphic.data << colors[color_index]\n        end\n      end\n    else\n      (same_color_len + 1).times do\n        palgraphic.data << nil\n      end\n    end\n  end\nend\npalgraphic\n"}}],"instance_methods":[{"html_id":"data:Array(UInt64|UInt32|UInt16|UInt8|Nil)-instance-method","name":"data","doc":"The image data","summary":"<p>The image data</p>","abstract":false,"location":{"filename":"src/D_File/dfl/palgraphic.cr","line_number":9,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/palgraphic.cr#L9"},"def":{"name":"data","return_type":"Array(UInt64 | UInt32 | UInt16 | UInt8 | Nil)","visibility":"Public","body":"@data"}},{"html_id":"data=(data:Array(UInt64|UInt32|UInt16|UInt8|Nil))-instance-method","name":"data=","doc":"The image data","summary":"<p>The image data</p>","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"Array(UInt64 | UInt32 | UInt16 | UInt8 | Nil)"}],"args_string":"(data : Array(UInt64 | UInt32 | UInt16 | UInt8 | Nil))","args_html":"(data : Array(UInt64 | UInt32 | UInt16 | UInt8 | Nil))","location":{"filename":"src/D_File/dfl/palgraphic.cr","line_number":9,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/palgraphic.cr#L9"},"def":{"name":"data=","args":[{"name":"data","external_name":"data","restriction":"Array(UInt64 | UInt32 | UInt16 | UInt8 | Nil)"}],"visibility":"Public","body":"@data = data"}},{"html_id":"height:UInt32-instance-method","name":"height","doc":"The height of the image","summary":"<p>The height of the image</p>","abstract":false,"location":{"filename":"src/D_File/dfl/palgraphic.cr","line_number":7,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/palgraphic.cr#L7"},"def":{"name":"height","return_type":"UInt32","visibility":"Public","body":"@height"}},{"html_id":"height=(height:UInt32)-instance-method","name":"height=","doc":"The height of the image","summary":"<p>The height of the image</p>","abstract":false,"args":[{"name":"height","external_name":"height","restriction":"UInt32"}],"args_string":"(height : UInt32)","args_html":"(height : UInt32)","location":{"filename":"src/D_File/dfl/palgraphic.cr","line_number":7,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/palgraphic.cr#L7"},"def":{"name":"height=","args":[{"name":"height","external_name":"height","restriction":"UInt32"}],"visibility":"Public","body":"@height = height"}},{"html_id":"to_graphic(palette:Palette):Graphic-instance-method","name":"to_graphic","doc":"Converts a palgraphic to a graphic","summary":"<p>Converts a palgraphic to a graphic</p>","abstract":false,"args":[{"name":"palette","external_name":"palette","restriction":"Palette"}],"args_string":"(palette : Palette) : Graphic","args_html":"(palette : <a href=\"../DFL/Palette.html\">Palette</a>) : <a href=\"../DFL/Graphic.html\">Graphic</a>","location":{"filename":"src/D_File/dfl/palgraphic.cr","line_number":123,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/palgraphic.cr#L123"},"def":{"name":"to_graphic","args":[{"name":"palette","external_name":"palette","restriction":"Palette"}],"return_type":"Graphic","visibility":"Public","body":"graphic = Graphic.new\ngraphic.width = width\ngraphic.height = height\ndata.each do |index|\n  graphic.data << palette.colors[index]\nend\ngraphic\n"}},{"html_id":"to_image(palette:Palette):Raylib::Image-instance-method","name":"to_image","doc":"Converts a palgraphic to a Raylib::Image","summary":"<p>Converts a palgraphic to a Raylib::Image</p>","abstract":false,"args":[{"name":"palette","external_name":"palette","restriction":"Palette"}],"args_string":"(palette : Palette) : Raylib::Image","args_html":"(palette : <a href=\"../DFL/Palette.html\">Palette</a>) : Raylib::Image","location":{"filename":"src/D_File/dfl/palgraphic.cr","line_number":62,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/palgraphic.cr#L62"},"def":{"name":"to_image","args":[{"name":"palette","external_name":"palette","restriction":"Palette"}],"return_type":"Raylib::Image","visibility":"Public","body":"image = Raylib.gen_image_color(@width, @height, Raylib::BLANK)\nwidth.times do |x|\n  height.times do |y|\n    pixel = palette.colors[data[(x.to_i * width.to_i) + y.to_i]]\n    if pixel.nil?\n      next\n    end\n    Raylib.image_draw_pixel(pointerof(image), x, y, pixel)\n  end\nend\nimage\n"}},{"html_id":"width:UInt32-instance-method","name":"width","doc":"The width of the image","summary":"<p>The width of the image</p>","abstract":false,"location":{"filename":"src/D_File/dfl/palgraphic.cr","line_number":5,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/palgraphic.cr#L5"},"def":{"name":"width","return_type":"UInt32","visibility":"Public","body":"@width"}},{"html_id":"width=(width:UInt32)-instance-method","name":"width=","doc":"The width of the image","summary":"<p>The width of the image</p>","abstract":false,"args":[{"name":"width","external_name":"width","restriction":"UInt32"}],"args_string":"(width : UInt32)","args_html":"(width : UInt32)","location":{"filename":"src/D_File/dfl/palgraphic.cr","line_number":5,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/palgraphic.cr#L5"},"def":{"name":"width=","args":[{"name":"width","external_name":"width","restriction":"UInt32"}],"visibility":"Public","body":"@width = width"}}]},{"html_id":"dfl/DFL/Sound","path":"DFL/Sound.html","kind":"class","full_name":"DFL::Sound","name":"Sound","abstract":false,"superclass":{"html_id":"dfl/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"dfl/WritingMethods/DFL/Sound","kind":"module","full_name":"WritingMethods::DFL::Sound","name":"Sound"},{"html_id":"dfl/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"dfl/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/D_File/dfl/sound.cr","line_number":3,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/sound.cr#L3"},{"filename":"src/write.cr","line_number":65,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write.cr#L65"}],"repository_name":"dfl","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"CHANNELS","name":"CHANNELS","value":"1_u16","doc":"The number of channels in the dfl sound","summary":"<p>The number of channels in the dfl sound</p>"}],"included_modules":[{"html_id":"dfl/WritingMethods/DFL/Sound","kind":"module","full_name":"WritingMethods::DFL::Sound","name":"Sound"}],"namespace":{"html_id":"dfl/DFL","kind":"class","full_name":"DFL","name":"DFL"},"doc":"A `DFL::Head`'s sound data","summary":"<p>A <code><a href=\"../DFL/Head.html\">DFL::Head</a></code>'s sound data</p>","constructors":[{"html_id":"from_wav(filename:String|Path):Sound-class-method","name":"from_wav","doc":"Reads in a dfl sound from a wav given the file path","summary":"<p>Reads in a dfl sound from a wav given the file path</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path) : Sound","args_html":"(filename : String | Path) : <a href=\"../DFL/Sound.html\">Sound</a>","location":{"filename":"src/D_File/dfl/sound.cr","line_number":89,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/sound.cr#L89"},"def":{"name":"from_wav","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"return_type":"Sound","visibility":"Public","body":"File.open(filename) do |io|\n  return from_wav(io)\nend"}},{"html_id":"from_wav(io:IO):Sound-class-method","name":"from_wav","doc":"Reads in a dfl sound from a wav given the io","summary":"<p>Reads in a dfl sound from a wav given the io</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Sound","args_html":"(io : IO) : <a href=\"../DFL/Sound.html\">Sound</a>","location":{"filename":"src/D_File/dfl/sound.cr","line_number":96,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/sound.cr#L96"},"def":{"name":"from_wav","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Sound","visibility":"Public","body":"sound = Sound.new\nio.gets(4)\nio.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\nio.gets(8)\nio.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\nio.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\nchannels = io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\nsound.sample_rate = io.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\nio.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\nio.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\nsound.bits_per_sample = io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\nio.gets(4)\nsound.samples_num = io.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\n(sound.samples_num * (8 / sound.bits_per_sample)).to_u32.times do |i|\n  case sound.bits_per_sample\n  when 8\n    sound.samples << (io.read_bytes(UInt8, IO::ByteFormat::LittleEndian))\n  when 16\n    sound.samples << (io.read_bytes(UInt16, IO::ByteFormat::LittleEndian))\n  end\nend\nreturn sound\n"}},{"html_id":"read(io:IO):Sound-class-method","name":"read","doc":"Reads in a dfl sound given the io","summary":"<p>Reads in a dfl sound given the io</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Sound","args_html":"(io : IO) : <a href=\"../DFL/Sound.html\">Sound</a>","location":{"filename":"src/D_File/dfl/sound.cr","line_number":17,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/sound.cr#L17"},"def":{"name":"read","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Sound","visibility":"Public","body":"sound = Sound.new\nsound.sample_rate = io.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\nsound.samples_num = io.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\nsound.bits_per_sample = io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\n(sound.samples_num * (8 / sound.bits_per_sample)).to_u32.times do |i|\n  case sound.bits_per_sample\n  when 8\n    sound.samples << (io.read_bytes(UInt8, IO::ByteFormat::LittleEndian))\n  when 16\n    sound.samples << (io.read_bytes(UInt16, IO::ByteFormat::LittleEndian))\n  end\nend\nsound\n"}}],"instance_methods":[{"html_id":"bits_per_sample:UInt16-instance-method","name":"bits_per_sample","doc":"The number of bits per each sample","summary":"<p>The number of bits per each sample</p>","abstract":false,"location":{"filename":"src/D_File/dfl/sound.cr","line_number":12,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/sound.cr#L12"},"def":{"name":"bits_per_sample","return_type":"UInt16","visibility":"Public","body":"@bits_per_sample"}},{"html_id":"bits_per_sample=(bits_per_sample:UInt16)-instance-method","name":"bits_per_sample=","doc":"The number of bits per each sample","summary":"<p>The number of bits per each sample</p>","abstract":false,"args":[{"name":"bits_per_sample","external_name":"bits_per_sample","restriction":"UInt16"}],"args_string":"(bits_per_sample : UInt16)","args_html":"(bits_per_sample : UInt16)","location":{"filename":"src/D_File/dfl/sound.cr","line_number":12,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/sound.cr#L12"},"def":{"name":"bits_per_sample=","args":[{"name":"bits_per_sample","external_name":"bits_per_sample","restriction":"UInt16"}],"visibility":"Public","body":"@bits_per_sample = bits_per_sample"}},{"html_id":"sample_rate:UInt32-instance-method","name":"sample_rate","doc":"The sample rate of the sound","summary":"<p>The sample rate of the sound</p>","abstract":false,"location":{"filename":"src/D_File/dfl/sound.cr","line_number":8,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/sound.cr#L8"},"def":{"name":"sample_rate","return_type":"UInt32","visibility":"Public","body":"@sample_rate"}},{"html_id":"sample_rate=(sample_rate:UInt32)-instance-method","name":"sample_rate=","doc":"The sample rate of the sound","summary":"<p>The sample rate of the sound</p>","abstract":false,"args":[{"name":"sample_rate","external_name":"sample_rate","restriction":"UInt32"}],"args_string":"(sample_rate : UInt32)","args_html":"(sample_rate : UInt32)","location":{"filename":"src/D_File/dfl/sound.cr","line_number":8,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/sound.cr#L8"},"def":{"name":"sample_rate=","args":[{"name":"sample_rate","external_name":"sample_rate","restriction":"UInt32"}],"visibility":"Public","body":"@sample_rate = sample_rate"}},{"html_id":"samples:Array(UInt8|UInt16)-instance-method","name":"samples","doc":"The samples","summary":"<p>The samples</p>","abstract":false,"location":{"filename":"src/D_File/dfl/sound.cr","line_number":14,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/sound.cr#L14"},"def":{"name":"samples","return_type":"Array(UInt8 | UInt16)","visibility":"Public","body":"@samples"}},{"html_id":"samples=(samples:Array(UInt8|UInt16))-instance-method","name":"samples=","doc":"The samples","summary":"<p>The samples</p>","abstract":false,"args":[{"name":"samples","external_name":"samples","restriction":"Array(UInt8 | UInt16)"}],"args_string":"(samples : Array(UInt8 | UInt16))","args_html":"(samples : Array(UInt8 | UInt16))","location":{"filename":"src/D_File/dfl/sound.cr","line_number":14,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/sound.cr#L14"},"def":{"name":"samples=","args":[{"name":"samples","external_name":"samples","restriction":"Array(UInt8 | UInt16)"}],"visibility":"Public","body":"@samples = samples"}},{"html_id":"samples_num:UInt32-instance-method","name":"samples_num","doc":"The number of samples in the sound","summary":"<p>The number of samples in the sound</p>","abstract":false,"location":{"filename":"src/D_File/dfl/sound.cr","line_number":10,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/sound.cr#L10"},"def":{"name":"samples_num","return_type":"UInt32","visibility":"Public","body":"@samples_num"}},{"html_id":"samples_num=(samples_num:UInt32)-instance-method","name":"samples_num=","doc":"The number of samples in the sound","summary":"<p>The number of samples in the sound</p>","abstract":false,"args":[{"name":"samples_num","external_name":"samples_num","restriction":"UInt32"}],"args_string":"(samples_num : UInt32)","args_html":"(samples_num : UInt32)","location":{"filename":"src/D_File/dfl/sound.cr","line_number":10,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/sound.cr#L10"},"def":{"name":"samples_num=","args":[{"name":"samples_num","external_name":"samples_num","restriction":"UInt32"}],"visibility":"Public","body":"@samples_num = samples_num"}},{"html_id":"to_wav(filename:String|Path):UInt32-instance-method","name":"to_wav","doc":"Writes a dfl sound to a wav given the file path","summary":"<p>Writes a dfl sound to a wav given the file path</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path) : UInt32","args_html":"(filename : String | Path) : UInt32","location":{"filename":"src/D_File/dfl/sound.cr","line_number":35,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/sound.cr#L35"},"def":{"name":"to_wav","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"return_type":"UInt32","visibility":"Public","body":"File.open(filename, \"w+\") do |io|\n  return to_wav(io)\nend"}},{"html_id":"to_wav(io:IO):UInt32-instance-method","name":"to_wav","doc":"Writes a dfl sound to a wav given the io","summary":"<p>Writes a dfl sound to a wav given the io</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : UInt32","args_html":"(io : IO) : UInt32","location":{"filename":"src/D_File/dfl/sound.cr","line_number":42,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/D_File/dfl/sound.cr#L42"},"def":{"name":"to_wav","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"UInt32","visibility":"Public","body":"file_size = 0_u32\nio << \"RIFF\"\nfile_size = file_size + 4_u32\nio.write_bytes((((4 + 24) + 8) + (samples.size.to_u32 * (bits_per_sample / 8))).to_u32, IO::ByteFormat::LittleEndian)\nfile_size = file_size + 4_u32\nio << \"WAVEfmt \"\nfile_size = file_size + 8_u32\nio.write_bytes(16_u32, IO::ByteFormat::LittleEndian)\nfile_size = file_size + 4_u32\nio.write_bytes(1_u16, IO::ByteFormat::LittleEndian)\nfile_size = file_size + 2_u32\nio.write_bytes((CHANNELS).to_u16, IO::ByteFormat::LittleEndian)\nfile_size = file_size + 2_u32\nio.write_bytes(sample_rate.to_u32, IO::ByteFormat::LittleEndian)\nfile_size = file_size + 4_u32\nio.write_bytes((((sample_rate.to_u32 * bits_per_sample) * CHANNELS) / 8).to_u32, IO::ByteFormat::LittleEndian)\nfile_size = file_size + 4_u32\nio.write_bytes(((bits_per_sample * CHANNELS) / 8).to_u16, IO::ByteFormat::LittleEndian)\nfile_size = file_size + 2_u32\nio.write_bytes(bits_per_sample.to_u16, IO::ByteFormat::LittleEndian)\nfile_size = file_size + 2_u32\nio << \"data\"\nfile_size = file_size + 4_u32\nio.write_bytes((samples.size.to_u32 * (bits_per_sample / 8)).to_u32, IO::ByteFormat::LittleEndian)\nfile_size = file_size + 4_u32\nsamples.each do |sample|\n  io.write_bytes(sample, IO::ByteFormat::LittleEndian)\n  file_size = file_size + (bits_per_sample / 8).to_u32\nend\nreturn file_size\n"}}]}]},{"html_id":"dfl/WritingMethods","path":"WritingMethods.html","kind":"module","full_name":"WritingMethods","name":"WritingMethods","abstract":false,"locations":[{"filename":"src/write.cr","line_number":4,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write.cr#L4"},{"filename":"src/write/write_graphic.cr","line_number":1,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write/write_graphic.cr#L1"},{"filename":"src/write/write_head.cr","line_number":1,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write/write_head.cr#L1"},{"filename":"src/write/write_palette.cr","line_number":1,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write/write_palette.cr#L1"},{"filename":"src/write/write_palgraphic.cr","line_number":1,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write/write_palgraphic.cr#L1"},{"filename":"src/write/write_sound.cr","line_number":1,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write/write_sound.cr#L1"}],"repository_name":"dfl","program":false,"enum":false,"alias":false,"const":false,"doc":"Methods for writing DFL and dpo data","summary":"<p>Methods for writing DFL and dpo data</p>","types":[{"html_id":"dfl/WritingMethods/DFL","path":"WritingMethods/DFL.html","kind":"module","full_name":"WritingMethods::DFL","name":"DFL","abstract":false,"locations":[{"filename":"src/write.cr","line_number":6,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write.cr#L6"},{"filename":"src/write/write_graphic.cr","line_number":2,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write/write_graphic.cr#L2"},{"filename":"src/write/write_head.cr","line_number":2,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write/write_head.cr#L2"},{"filename":"src/write/write_palette.cr","line_number":2,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write/write_palette.cr#L2"},{"filename":"src/write/write_palgraphic.cr","line_number":2,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write/write_palgraphic.cr#L2"},{"filename":"src/write/write_sound.cr","line_number":2,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write/write_sound.cr#L2"}],"repository_name":"dfl","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"dfl/DFL","kind":"class","full_name":"DFL","name":"DFL"}],"namespace":{"html_id":"dfl/WritingMethods","kind":"module","full_name":"WritingMethods","name":"WritingMethods"},"doc":"The main class for working with .dfl files","summary":"<p>The main class for working with .dfl files</p>","instance_methods":[{"html_id":"write(filename:String|Path)-instance-method","name":"write","doc":"Writes out the dfl given the filename\n```\ndfl = DFL.new\ndfl.write(\"Path/To/MyDFL.dfl\")\n```","summary":"<p>Writes out the dfl given the filename <code>dfl = DFL.new dfl.write(&quot;Path/To/MyDFL.dfl&quot;)</code></p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path)","args_html":"(filename : String | Path)","location":{"filename":"src/write.cr","line_number":12,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write.cr#L12"},"def":{"name":"write","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"visibility":"Public","body":"File.open(filename, \"w+\") do |io|\n  write(io)\nend"}},{"html_id":"write(io:IO)-instance-method","name":"write","doc":"Writes out the dfl given the io\n```\ndfl = DFL.new\nFile.open(\"Path/To/MyDFL.dfl\") do |io|\n  dfl.write(io)\nend\n```","summary":"<p>Writes out the dfl given the io <code>dfl = DFL.new File.open(&quot;Path/To/MyDFL.dfl&quot;) do |io| dfl.write(io) end</code></p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/write.cr","line_number":25,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write.cr#L25"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io.print(\".DFL\")\ndata_num = empty.size + sounds.size\nio.write_bytes(data_num.to_u32, IO::ByteFormat::LittleEndian)\nempty.each do |head|\n  head.write(io)\nend\nsounds.each do |head|\n  head.write(io)\nend\ngraphics.each do |head|\n  head.write(io)\nend\npalette.write(io)\npalgraphics.each do |head|\n  head.write(io)\nend\n"}}],"types":[{"html_id":"dfl/WritingMethods/DFL/Empty","path":"WritingMethods/DFL/Empty.html","kind":"module","full_name":"WritingMethods::DFL::Empty","name":"Empty","abstract":false,"locations":[{"filename":"src/write/write_head.cr","line_number":27,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write/write_head.cr#L27"}],"repository_name":"dfl","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"dfl/DFL/Empty","kind":"struct","full_name":"DFL::Empty","name":"Empty"}],"namespace":{"html_id":"dfl/WritingMethods/DFL","kind":"module","full_name":"WritingMethods::DFL","name":"DFL"},"doc":"Empty `DFL::Head` data","summary":"<p>Empty <code><a href=\"../../WritingMethods/DFL/Head.html\">DFL::Head</a></code> data</p>","instance_methods":[{"html_id":"write(void)-instance-method","name":"write","doc":"Empty write method so that it works with other data types","summary":"<p>Empty write method so that it works with other data types</p>","abstract":false,"args":[{"name":"void","external_name":"void","restriction":""}],"args_string":"(void)","args_html":"(void)","location":{"filename":"src/write/write_head.cr","line_number":29,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write/write_head.cr#L29"},"def":{"name":"write","args":[{"name":"void","external_name":"void","restriction":""}],"visibility":"Public","body":""}}]},{"html_id":"dfl/WritingMethods/DFL/Graphic","path":"WritingMethods/DFL/Graphic.html","kind":"module","full_name":"WritingMethods::DFL::Graphic","name":"Graphic","abstract":false,"locations":[{"filename":"src/write/write_graphic.cr","line_number":4,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write/write_graphic.cr#L4"}],"repository_name":"dfl","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"dfl/DFL/Graphic","kind":"class","full_name":"DFL::Graphic","name":"Graphic"}],"namespace":{"html_id":"dfl/WritingMethods/DFL","kind":"module","full_name":"WritingMethods::DFL","name":"DFL"},"doc":"A `DFL::Head`'s graphic data","summary":"<p>A <code><a href=\"../../WritingMethods/DFL/Head.html\">DFL::Head</a></code>'s graphic data</p>","instance_methods":[{"html_id":"write(io:IO)-instance-method","name":"write","doc":"Writes out the graphic given the io","summary":"<p>Writes out the graphic given the io</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/write/write_graphic.cr","line_number":6,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write/write_graphic.cr#L6"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io.write_bytes(width.to_u32, IO::ByteFormat::LittleEndian)\nio.write_bytes(height.to_u32, IO::ByteFormat::LittleEndian)\ncolors = [] of ::DFL::Color\ndata.each do |color|\n  if color && (!colors.find do |match|\n    match == color\n  end)\n    colors << color\n  end\nend\nif colors.size > UInt32::MAX\n  palette_byte_size = 8\n  io.write_bytes(palette_byte_size.to_u8, IO::ByteFormat::LittleEndian)\n  io.write_bytes(colors.size.to_u64, IO::ByteFormat::LittleEndian)\nelse\n  if colors.size > UInt16::MAX\n    palette_byte_size = 4\n    io.write_bytes(palette_byte_size.to_u8, IO::ByteFormat::LittleEndian)\n    io.write_bytes(colors.size.to_u32, IO::ByteFormat::LittleEndian)\n  else\n    if colors.size > UInt8::MAX\n      palette_byte_size = 2\n      io.write_bytes(palette_byte_size.to_u8, IO::ByteFormat::LittleEndian)\n      io.write_bytes(colors.size.to_u16, IO::ByteFormat::LittleEndian)\n    else\n      palette_byte_size = 1\n      io.write_bytes(palette_byte_size.to_u8, IO::ByteFormat::LittleEndian)\n      io.write_bytes(colors.size.to_u8, IO::ByteFormat::LittleEndian)\n    end\n  end\nend\ncolors.each do |color|\n  io.write_bytes(color.r.to_u8, IO::ByteFormat::LittleEndian)\n  io.write_bytes(color.g.to_u8, IO::ByteFormat::LittleEndian)\n  io.write_bytes(color.b.to_u8, IO::ByteFormat::LittleEndian)\nend\ncurrent_pixel = 0\nwhile !(current_pixel == (width * height))\n  color = data[current_pixel]\n  same_color_len = 0\n  if color\n    data[current_pixel..].each_with_index do |same_color, index|\n      if same_color != color\n        same_color_len = index - 1\n        break\n      end\n      same_color_len = index\n    end\n    io.write_bytes(1_u8, IO::ByteFormat::LittleEndian)\n    if same_color_len > UInt32::MAX\n      io.write_bytes(8_u8, IO::ByteFormat::LittleEndian)\n      io.write_bytes(same_color_len.to_u64, IO::ByteFormat::LittleEndian)\n    else\n      if same_color_len > UInt16::MAX\n        io.write_bytes(4_u8, IO::ByteFormat::LittleEndian)\n        io.write_bytes(same_color_len.to_u32, IO::ByteFormat::LittleEndian)\n      else\n        if same_color_len > UInt8::MAX\n          io.write_bytes(2_u8, IO::ByteFormat::LittleEndian)\n          io.write_bytes(same_color_len.to_u16, IO::ByteFormat::LittleEndian)\n        else\n          io.write_bytes(1_u8, IO::ByteFormat::LittleEndian)\n          io.write_bytes(same_color_len.to_u8, IO::ByteFormat::LittleEndian)\n        end\n      end\n    end\n    color_index = 0\n    colors.each_with_index do |match, i|\n      if ((match.r == color.r) && (match.g == color.g)) && (match.b == color.b)\n        color_index = i\n      end\n    end\n    if colors.size > UInt32::MAX\n      io.write_bytes(color_index.to_u64, IO::ByteFormat::LittleEndian)\n    else\n      if colors.size > UInt16::MAX\n        io.write_bytes(color_index.to_u32, IO::ByteFormat::LittleEndian)\n      else\n        if colors.size > UInt8::MAX\n          io.write_bytes(color_index.to_u16, IO::ByteFormat::LittleEndian)\n        else\n          io.write_bytes(color_index.to_u8, IO::ByteFormat::LittleEndian)\n        end\n      end\n    end\n  else\n    data[current_pixel..].each_with_index do |same_color, index|\n      if !same_color.nil?\n        same_color_len = index - 1\n        break\n      end\n      same_color_len = index\n    end\n    io.write_bytes(0_u8, IO::ByteFormat::LittleEndian)\n    if same_color_len > UInt32::MAX\n      io.write_bytes(4_u8, IO::ByteFormat::LittleEndian)\n      io.write_bytes(same_color_len.to_u64, IO::ByteFormat::LittleEndian)\n    else\n      if same_color_len > UInt16::MAX\n        io.write_bytes(3_u8, IO::ByteFormat::LittleEndian)\n        io.write_bytes(same_color_len.to_u32, IO::ByteFormat::LittleEndian)\n      else\n        if same_color_len > UInt8::MAX\n          io.write_bytes(2_u8, IO::ByteFormat::LittleEndian)\n          io.write_bytes(same_color_len.to_u16, IO::ByteFormat::LittleEndian)\n        else\n          io.write_bytes(1_u8, IO::ByteFormat::LittleEndian)\n          io.write_bytes(same_color_len.to_u8, IO::ByteFormat::LittleEndian)\n        end\n      end\n    end\n  end\n  current_pixel = current_pixel + (same_color_len + 1)\nend\n"}}]},{"html_id":"dfl/WritingMethods/DFL/Head","path":"WritingMethods/DFL/Head.html","kind":"module","full_name":"WritingMethods::DFL::Head","name":"Head","abstract":false,"locations":[{"filename":"src/write/write_head.cr","line_number":4,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write/write_head.cr#L4"}],"repository_name":"dfl","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"dfl/DFL/Head","kind":"class","full_name":"DFL::Head","name":"Head"}],"namespace":{"html_id":"dfl/WritingMethods/DFL","kind":"module","full_name":"WritingMethods::DFL","name":"DFL"},"doc":"A chunk of data that holds info about data in the `DFL`","summary":"<p>A chunk of data that holds info about data in the <code><a href=\"../../WritingMethods/DFL.html\">DFL</a></code></p>","instance_methods":[{"html_id":"write(filename:String|Path)-instance-method","name":"write","doc":"Writes out the head given the filename\n```\nhead = DFL::Head.new\nhead.write(\"Path/To/MyHead.dpo\")\n```","summary":"<p>Writes out the head given the filename <code>head = DFL::Head.new head.write(&quot;Path/To/MyHead.dpo&quot;)</code></p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path)","args_html":"(filename : String | Path)","location":{"filename":"src/write/write_head.cr","line_number":10,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write/write_head.cr#L10"},"def":{"name":"write","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"visibility":"Public","body":"File.open(filename, \"w+\") do |io|\n  write(io)\nend"}},{"html_id":"write(io:IO)-instance-method","name":"write","doc":"Writes out the head given the io","summary":"<p>Writes out the head given the io</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/write/write_head.cr","line_number":17,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write/write_head.cr#L17"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io.write_bytes(type.to_u8, IO::ByteFormat::LittleEndian)\ntrimmed_name = name[0..254]\nio.write_bytes(trimmed_name.size.to_u8, IO::ByteFormat::LittleEndian)\nio.print(trimmed_name)\ndata.write(io)\n"}}]},{"html_id":"dfl/WritingMethods/DFL/Palette","path":"WritingMethods/DFL/Palette.html","kind":"module","full_name":"WritingMethods::DFL::Palette","name":"Palette","abstract":false,"locations":[{"filename":"src/write/write_palette.cr","line_number":4,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write/write_palette.cr#L4"}],"repository_name":"dfl","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"dfl/DFL/Palette","kind":"class","full_name":"DFL::Palette","name":"Palette"}],"namespace":{"html_id":"dfl/WritingMethods/DFL","kind":"module","full_name":"WritingMethods::DFL","name":"DFL"},"doc":"A `DFL::Head`'s palette data","summary":"<p>A <code><a href=\"../../WritingMethods/DFL/Head.html\">DFL::Head</a></code>'s palette data</p>","instance_methods":[{"html_id":"write(io:IO)-instance-method","name":"write","doc":"Writes out the palette given the io","summary":"<p>Writes out the palette given the io</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/write/write_palette.cr","line_number":6,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write/write_palette.cr#L6"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"if colors.size > UInt32::MAX\n  io.write_bytes(8_u8, IO::ByteFormat::LittleEndian)\n  io.write_bytes(colors.size.to_u64, IO::ByteFormat::LittleEndian)\nelse\n  if colors.size > UInt16::MAX\n    io.write_bytes(4_u8, IO::ByteFormat::LittleEndian)\n    io.write_bytes(colors.size.to_u32, IO::ByteFormat::LittleEndian)\n  else\n    if colors.size > UInt8::MAX\n      io.write_bytes(2_u8, IO::ByteFormat::LittleEndian)\n      io.write_bytes(colors.size.to_u16, IO::ByteFormat::LittleEndian)\n    else\n      io.write_bytes(1_u8, IO::ByteFormat::LittleEndian)\n      io.write_bytes(colors.size.to_u8, IO::ByteFormat::LittleEndian)\n    end\n  end\nend\ncolors.each do |color|\n  io.write_bytes(color.r.to_u8, IO::ByteFormat::LittleEndian)\n  io.write_bytes(color.g.to_u8, IO::ByteFormat::LittleEndian)\n  io.write_bytes(color.b.to_u8, IO::ByteFormat::LittleEndian)\nend\n"}}]},{"html_id":"dfl/WritingMethods/DFL/PalGraphic","path":"WritingMethods/DFL/PalGraphic.html","kind":"module","full_name":"WritingMethods::DFL::PalGraphic","name":"PalGraphic","abstract":false,"locations":[{"filename":"src/write/write_palgraphic.cr","line_number":4,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write/write_palgraphic.cr#L4"}],"repository_name":"dfl","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"dfl/DFL/PalGraphic","kind":"class","full_name":"DFL::PalGraphic","name":"PalGraphic"}],"namespace":{"html_id":"dfl/WritingMethods/DFL","kind":"module","full_name":"WritingMethods::DFL","name":"DFL"},"doc":"A `DFL::Head`'s palgraphic data","summary":"<p>A <code><a href=\"../../WritingMethods/DFL/Head.html\">DFL::Head</a></code>'s palgraphic data</p>","instance_methods":[{"html_id":"write(io:IO)-instance-method","name":"write","doc":"Writes out the palgraphic given the io","summary":"<p>Writes out the palgraphic given the io</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/write/write_palgraphic.cr","line_number":6,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write/write_palgraphic.cr#L6"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io.write_bytes(width.to_u32, IO::ByteFormat::LittleEndian)\nio.write_bytes(height.to_u32, IO::ByteFormat::LittleEndian)\ncurrent_biggest_index = 0\ndata.each do |index|\n  if index\n    if index > current_biggest_index\n      current_biggest_index = index\n    end\n  end\nend\nif current_biggest_index > UInt32::MAX\n  color_byte_size = 8\nelse\n  if current_biggest_index > UInt16::MAX\n    color_byte_size = 4\n  else\n    if current_biggest_index > UInt8::MAX\n      color_byte_size = 2\n    else\n      color_byte_size = 1\n    end\n  end\nend\nio.write_bytes(color_byte_size.to_u8, IO::ByteFormat::LittleEndian)\ncurrent_pixel = 0\nwhile !(current_pixel == (width * height))\n  color = data[current_pixel]\n  same_color_len = 0\n  if color\n    data[current_pixel..].each_with_index do |same_color, index|\n      if same_color != color\n        same_color_len = index - 1\n        break\n      end\n      same_color_len = index\n    end\n    io.write_bytes(1_u8, IO::ByteFormat::LittleEndian)\n    if same_color_len > UInt32::MAX\n      io.write_bytes(8_u8, IO::ByteFormat::LittleEndian)\n      io.write_bytes(same_color_len.to_u64, IO::ByteFormat::LittleEndian)\n    else\n      if same_color_len > UInt16::MAX\n        io.write_bytes(4_u8, IO::ByteFormat::LittleEndian)\n        io.write_bytes(same_color_len.to_u32, IO::ByteFormat::LittleEndian)\n      else\n        if same_color_len > UInt8::MAX\n          io.write_bytes(2_u8, IO::ByteFormat::LittleEndian)\n          io.write_bytes(same_color_len.to_u16, IO::ByteFormat::LittleEndian)\n        else\n          io.write_bytes(1_u8, IO::ByteFormat::LittleEndian)\n          io.write_bytes(same_color_len.to_u8, IO::ByteFormat::LittleEndian)\n        end\n      end\n    end\n    case color_byte_size\n    when 8\n      io.write_bytes(color.to_u64, IO::ByteFormat::LittleEndian)\n    when 4\n      io.write_bytes(color.to_u32, IO::ByteFormat::LittleEndian)\n    when 2\n      io.write_bytes(color.to_u16, IO::ByteFormat::LittleEndian)\n    when 1\n      io.write_bytes(color.to_u8, IO::ByteFormat::LittleEndian)\n    end\n  else\n    data[current_pixel..].each_with_index do |same_color, index|\n      if !same_color.nil?\n        same_color_len = index - 1\n        break\n      end\n      same_color_len = index\n    end\n    io.write_bytes(0_u8, IO::ByteFormat::LittleEndian)\n    if same_color_len > UInt32::MAX\n      io.write_bytes(4_u8, IO::ByteFormat::LittleEndian)\n      io.write_bytes(same_color_len.to_u64, IO::ByteFormat::LittleEndian)\n    else\n      if same_color_len > UInt16::MAX\n        io.write_bytes(3_u8, IO::ByteFormat::LittleEndian)\n        io.write_bytes(same_color_len.to_u32, IO::ByteFormat::LittleEndian)\n      else\n        if same_color_len > UInt8::MAX\n          io.write_bytes(2_u8, IO::ByteFormat::LittleEndian)\n          io.write_bytes(same_color_len.to_u16, IO::ByteFormat::LittleEndian)\n        else\n          io.write_bytes(1_u8, IO::ByteFormat::LittleEndian)\n          io.write_bytes(same_color_len.to_u8, IO::ByteFormat::LittleEndian)\n        end\n      end\n    end\n  end\n  current_pixel = current_pixel + (same_color_len + 1)\nend\n"}}]},{"html_id":"dfl/WritingMethods/DFL/Sound","path":"WritingMethods/DFL/Sound.html","kind":"module","full_name":"WritingMethods::DFL::Sound","name":"Sound","abstract":false,"locations":[{"filename":"src/write/write_sound.cr","line_number":4,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write/write_sound.cr#L4"}],"repository_name":"dfl","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"dfl/DFL/Sound","kind":"class","full_name":"DFL::Sound","name":"Sound"}],"namespace":{"html_id":"dfl/WritingMethods/DFL","kind":"module","full_name":"WritingMethods::DFL","name":"DFL"},"doc":"A `DFL::Head`'s sound data","summary":"<p>A <code><a href=\"../../WritingMethods/DFL/Head.html\">DFL::Head</a></code>'s sound data</p>","instance_methods":[{"html_id":"write(io:IO)-instance-method","name":"write","doc":"Writes out the sound given the io","summary":"<p>Writes out the sound given the io</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/write/write_sound.cr","line_number":6,"url":"https://github.com/D-Shwagginz/dfl/blob/854276e25f4c0c754b1aaf5546a8d10afb03b81f/src/write/write_sound.cr#L6"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io.write_bytes(sample_rate.to_u32, IO::ByteFormat::LittleEndian)\nio.write_bytes(samples_num.to_u32, IO::ByteFormat::LittleEndian)\nio.write_bytes(bits_per_sample.to_u16, IO::ByteFormat::LittleEndian)\nsamples.each do |sample|\n  case bits_per_sample\n  when 8\n    io.write_bytes(sample.to_u8, IO::ByteFormat::LittleEndian)\n  when 16\n    io.write_bytes(sample.to_u16, IO::ByteFormat::LittleEndian)\n  when 32\n    io.write_bytes(sample.to_u32, IO::ByteFormat::LittleEndian)\n  end\nend\n"}}]}]}]}]}}